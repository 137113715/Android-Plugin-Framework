
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//在插件脚本中apply此脚本, 此脚本一共做了2件事
//1、编译非独立插件时引入编译宿主时导出的资源包.ap_
//2、编译非独立插件时引入编译宿主时导出的主题包
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

//第一件事 将宿主资源添加到编译时，仅参与编译，不参与打包
android.aaptOptions.additionalParameters('-I', host_ap_path)

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("merge") && task.name.endsWith("Resources")) {
        task.setOnlyIf { true }
        task.outputs.upToDateWhen { false }
        task.doLast {
            //第二件事
            applyThemePatch(task.name);
        }
    }
}

def applyThemePatch(taskName) {

    def buildType = taskName.replace("merge", "").replace("Resources", "").toLowerCase();
    def fromDir = host_output_dir + "/theme_patch/" + buildType;
    def resourceDir = project.buildDir.absolutePath + "/intermediates/res/merged/" + buildType;

    FileTree allxmlFiles = fileTree(dir: fromDir)
    allxmlFiles.include '*.xml'
    allxmlFiles.each { File itemFile ->

        String dest;
        if (itemFile.name.equals('patch_theme.xml')) {
            dest = resourceDir +  '/values/'
        } else {
            dest = resourceDir +  '/' + itemFile.name.replace('patch_', '').replace('.xml', '')  + "/"
        }

        println "apply from " + itemFile + " to " + dest
        copy {
            from(fromDir) {
                include itemFile.name
            }
            into(dest)
        }
    }
}
