
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//在插件脚本中apply此脚本, 此脚本一共做了2件事
//1、编译非独立插件时引入编译宿主时导出的资源包.ap_
//2、编译非独立插件时引入编译宿主时导出的主题包
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

//第一件事 将宿主资源添加到编译时，仅参与编译，不参与打包
if (getProperties().containsKey("host_ap_path")) {
    println "additionalParameters -I " + ext.host_ap_path
    android.aaptOptions.additionalParameters('-I', host_ap_path)
}

if (getProperties().containsKey("host_output_dir")) {
    tasks.whenTaskAdded { task ->
        if (task.name.startsWith("merge") && task.name.endsWith("Resources")) {
            task.setOnlyIf { true }
            task.outputs.upToDateWhen { false }
            task.doLast {
                //第二件事
                applyThemePatch(task.name);
            }
        }
    }
}

def applyThemePatch(taskName) {

    def buildType = taskName.replace("merge", "").replace("Resources", "").toLowerCase();
    def fromDir = host_output_dir + "/theme_patch/" + buildType;
    def resourceDir = project.buildDir.absolutePath + "/intermediates/res/merged/" + buildType;

    FileTree allxmlFiles = fileTree(dir: fromDir)
    allxmlFiles.include '*.xml'
    allxmlFiles.each { File itemFile ->

        String dest;
        if (itemFile.name.equals('patch_theme.xml')) {
            dest = resourceDir +  '/values/'
        } else {
            dest = resourceDir +  '/' + itemFile.name.replace('patch_', '').replace('.xml', '')  + "/"
        }

        println "apply from " + itemFile + " to " + dest
        copy {
            from(fromDir) {
                include itemFile.name
            }
            into(dest)
        }
    }
}

/** fix provided config for aar dependences
ext.plist = []
configurations.provided.dependencies.each {dep ->
    println dep
    gradle.startParameter.taskNames.each { startTaskName ->
        if (startTaskName.startsWith("assemble") || startTaskName.startsWith("build")) {
            if (dep.version.equals('unspecified')) {

                String buildType = startTaskName.replace("assemble", "").replace("build", "")
                if (buildType.length() == 0) {
                    buildType = "debug";
                }

                //为依赖库插入jar任务
                dep.dependencyProject.tasks.getByName("compile" + buildType + "Sources").doLast {
                    String jarTaskName = "jar" + buildType.substring(0, 1).toUpperCase()+ buildType.replaceFirst("\\w","") +  "Classes"
                    println '执行task：' + jarTaskName;
                    dep.dependencyProject.tasks.getByName(jarTaskName).execute()
                }

                //src的jar
                File srcJar = new File(dep.dependencyProject.buildDir, "intermediates/packaged/" + buildType + "/classes.jar")
                addProvidedDependences(configurations.provided.dependencies, srcJar);

                //处理aar依赖
                File aarDir = new File(dep.dependencyProject.buildDir, "intermediates/exploded-aar")
                addProvidedDependences(configurations.provided.dependencies, aarDir)

                //处理libs/jar依赖
                //TODO

            }
        }
    }
}

configurations.provided.dependencies.clear()

ext.plist.each { path ->
    configurations.provided.dependencies.add(project.dependencies.create(files(path)))
    println "try add provided jar to plugin project : " + path
}

def addProvidedDependences(DependencySet providedDepSet, File root) {
    //宿主编译前文件可能不存在, 所以要先编译宿主 再编译插件
    if (root.getName().endsWith(".jar")) {
        ext.plist +=[root.getAbsolutePath()]
        //providedDepSet.add(project.dependencies.create(files(root.getAbsolutePath())))
        //println "try add provided jar to plugin project : " + root.getAbsolutePath()
    } else {
        File[] subFiles = root.listFiles();
        if (subFiles != null) {
            for (File subFile : subFiles) {
                addProvidedDependences(providedDepSet, subFile);
            }
        }
    }
}
*/